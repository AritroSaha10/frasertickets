basePath: /
definitions:
  controllers.eventControllerCreateRequestBody:
    properties:
      address:
        type: string
      custom_fields_schema:
        additionalProperties: true
        type: object
      description:
        type: string
      end_timestamp:
        type: string
      img_urls:
        items:
          type: string
        type: array
      location:
        type: string
      name:
        type: string
      start_timestamp:
        type: string
    required:
    - address
    - custom_fields_schema
    - description
    - end_timestamp
    - img_urls
    - location
    - name
    - start_timestamp
    type: object
  controllers.queuedTicketControllerCreateRequestBody:
    properties:
      eventID:
        type: string
      maxScanCount:
        minimum: 0
        type: integer
      studentNumber:
        type: string
    required:
    - eventID
    - studentNumber
    type: object
  controllers.ticketControllerCreateRequestBody:
    properties:
      customFields:
        additionalProperties: true
        type: object
      eventID:
        type: string
      maxScanCount:
        minimum: 0
        type: integer
      studentNumber:
        type: string
    required:
    - customFields
    - eventID
    - studentNumber
    type: object
  controllers.ticketControllerScanRequestBody:
    properties:
      ticketID:
        type: string
    required:
    - ticketID
    type: object
  controllers.ticketControllerSearchRequestBody:
    properties:
      eventID:
        type: string
      studentNumber:
        type: string
    required:
    - eventID
    - studentNumber
    type: object
  models.Event:
    properties:
      address:
        type: string
      custom_fields_schema:
        additionalProperties: true
        description: Schema for extra data in JSON Schema format
        type: object
      description:
        type: string
      end_timestamp:
        type: string
      id:
        type: string
      img_urls:
        items:
          type: string
        type: array
      location:
        description: Ex. name of venue
        type: string
      name:
        type: string
      start_timestamp:
        type: string
    type: object
  models.QueuedTicket:
    properties:
      customFields:
        additionalProperties: true
        type: object
      eventData:
        $ref: '#/definitions/models.Event'
      eventID:
        type: string
      full_name_update:
        type: string
      id:
        type: string
      max_scan_count:
        type: integer
      studentNumber:
        type: string
      timestamp:
        type: string
    type: object
  models.Ticket:
    properties:
      customFields:
        additionalProperties: true
        type: object
      eventData:
        $ref: '#/definitions/models.Event'
      eventID:
        type: string
      id:
        type: string
      lastScanTime:
        type: string
      maxScanCount:
        type: integer
      ownerData:
        $ref: '#/definitions/models.User'
      ownerID:
        description: owner ID
        type: string
      scanCount:
        type: integer
      timestamp:
        type: string
    type: object
  models.TicketScan:
    properties:
      index:
        type: integer
      noProcessReason:
        type: string
      processed:
        type: boolean
      ticketData:
        $ref: '#/definitions/models.Ticket'
      timestamp:
        type: string
      userData:
        $ref: '#/definitions/models.User'
    type: object
  models.User:
    properties:
      admin:
        type: boolean
      full_name:
        type: string
      id:
        description: This is also the UUID in Firebase Auth
        type: string
      pfp_url:
        type: string
      student_number:
        type: string
      superadmin:
        type: boolean
    type: object
host: localhost:3001
info:
  contact:
    email: aritro.saha729@gmail.com
    name: Aritro Saha
    url: http://www.aritrosaha.ca
  description: The backend REST API for FraserTickets.
  title: FraserTickets Backend
  version: "1.0"
paths:
  /events:
    get:
      description: Lists all events in the database. Available to all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Event'
            type: array
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List all events
      tags:
      - event
    post:
      consumes:
      - application/json
      description: Creates an event in the database. Only available to admins.
      parameters:
      - description: Event details
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/controllers.eventControllerCreateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create an event
      tags:
      - event
  /events/{id}:
    delete:
      description: Delete event from database. Only available to admins.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete event
      tags:
      - event
    get:
      description: Get the data for one event from the DB. Available to all users.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Event'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get an event
      tags:
      - event
    patch:
      description: Update the details for an event. Only available to admins.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates to make (not all attributes below are required, and id
          cannot be changed)
        in: body
        name: updates
        required: true
        schema:
          $ref: '#/definitions/models.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "304":
          description: Not Modified
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update event details
      tags:
      - event
  /events/{id}/ticket-count:
    get:
      description: Get the ticket count for an event. Only available to admins.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get ticket count for event
      tags:
      - event
  /events/{id}/tickets:
    get:
      description: Get every ticket for an event. Only available to admins.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get tickets for event
      tags:
      - event
  /queuedtickets:
    get:
      description: List all queued tickets. Only available to admins.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.QueuedTicket'
            type: array
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List all queued tickets
      tags:
      - queuedticket
    post:
      consumes:
      - application/json
      description: Create a new queued ticket. Only available to admins.
      parameters:
      - description: Queued ticket details
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/controllers.queuedTicketControllerCreateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.QueuedTicket'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create new queued ticket
      tags:
      - ticket
  /queuedtickets/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a queued ticket. Only available to admins.
      parameters:
      - description: Queued ticket ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a queued ticket
      tags:
      - ticket
  /tickets:
    get:
      description: List the tickets owned by the user sending the request. Available
        to all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List the requesting user's tickets
      tags:
      - ticket
    post:
      consumes:
      - application/json
      description: Create a new ticket. Only available to admins.
      parameters:
      - description: Ticket details
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/controllers.ticketControllerCreateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create new ticket
      tags:
      - ticket
  /tickets/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a ticket. Only available to admins.
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a ticket
      tags:
      - ticket
    get:
      description: Get one ticket. Only available to admins and the ticket owner.
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get one ticket
      tags:
      - ticket
    patch:
      consumes:
      - application/json
      description: Updates a ticket. Only available to admins.
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update a ticket
      tags:
      - ticket
  /tickets/all:
    get:
      description: List all tickets. Only available to admins.
      parameters:
      - description: filter by event ID
        in: query
        name: eventId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List all tickets
      tags:
      - ticket
  /tickets/scan:
    post:
      consumes:
      - application/json
      description: Scans in a ticket given the ticket ID. Only available to admins.
      parameters:
      - description: Search query
        in: body
        name: searchQuery
        required: true
        schema:
          $ref: '#/definitions/controllers.ticketControllerScanRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketScan'
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Scans a ticket
      tags:
      - ticket
  /tickets/search:
    post:
      consumes:
      - application/json
      description: Search for a ticket by using the owner and associated event. Only
        available to admins.
      parameters:
      - description: Search query
        in: body
        name: searchQuery
        required: true
        schema:
          $ref: '#/definitions/controllers.ticketControllerSearchRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Ticket'
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search for ticket using owner and event
      tags:
      - ticket
  /tickets/user/{uid}:
    get:
      description: List the tickets owned by the user sending the request. Only available
        to admins.
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Ticket'
            type: array
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List a user's tickets
      tags:
      - ticket
  /users:
    get:
      description: Lists all user data in the database. Only available to admins.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List all users
      tags:
      - user
    post:
      description: Creates a user in the database when they first make their account.
        Only available to new users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a user in DB on account creation
      tags:
      - user
  /users/{id}:
    get:
      description: Get a user's data. Only available to admins and the requesting
        user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Gets user data
      tags:
      - user
    patch:
      description: Update a user's data. Only available to admins.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates to make (can only change full name for now)
        in: body
        name: updates
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "304":
          description: Not Modified
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update user data
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
